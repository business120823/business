# Generated by Django 4.2.2 on 2023-10-27 02:52
from pickle import FALSE, TRUE
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

from django.db import migrations
# Подключаем модуль для работы с датой/веременем
from datetime import datetime, timedelta
# Поделючаем модкль генерации случайных чисел
import random

global dict_kind
dict_kind = {}
global dict_category
dict_category = {}
global dict_catalog_price
dict_catalog_price = {}

# Получение случайного адреса (k - включает ли адрес квартиру)
def get_adres(k):
    ulica = ["ул. Баженова", 
            "ул. Вавилова", 
            "ул. Гастелло", 
            "ул. Гончарная", 
            "ул. Грибоедова", 
            "ул. Дружбы", 
            "ул. Ермекова",
            "ул. Жамбыла", 
            "ул. Защитная", 
            "ул. Ипподромная", 
            "ул. Караванная", 
            "ул. Кирпичная", 
            "ул. Луначарского", 
            "ул. Маяковского", 
            "ул. Некрасова", 
            "ул. Новоселов",
            "ул. Олимпийская", 
            "ул. Победы", 
            "ул. Садовая", 
            "ул. Стремянная", 
            "ул. Университетская", 
            "ул. Фрунзе",
            "ул. Чайковского" 
        ]
    if (k==True):
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) + "-" + str(random.randint(1, 200)) 
    else:
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) 
    return adres

# Получение случайного адреса (k - включает ли адрес квартиру)
def get_telefon():
    if random.randint(0, 1) == 1:
        telefon = "+7-911-"
    else:
        telefon = "+7-904-" 
    telefon = telefon + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + "-" + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) 
    return telefon

# Найти или Добавить Категорию заяки
def get_kind(apps, val):   
    # Поиск категории
    if val in dict_kind.values():
        for k, v in dict_kind.items():
            if v == val:
                return k    
    else:
        Kind = apps.get_model("small", "Kind")
        kind = Kind()
        kind.title = val
        kind.save()
        dict_kind[kind.id] = kind.title
        return kind.id

# Добавить клиента 
def insert_client(apps, param_client):   
    Client = apps.get_model("small", "Client")
    client = Client()
    client.name = param_client[0]
    client.address = param_client[1]
    client.phone = param_client[2]
    client.email = param_client[3]
    client.leader = param_client[4]
    client.save()
    return

# Добавить заказы клиента 
def insert_application(apps, param_application):   
    Application = apps.get_model("small", "Application")
    application = Application()
    application.datea = param_application[0]
    application.client_id = param_application[1]
    application.kind_id = param_application[2]
    application.title = param_application[3]
    application.details = param_application[4]
    application.price = param_application[5]
    application.save()
    application.datea = param_application[0]
    application.save()
    return

# Добавить Приходные накладные 
def insert_coming(apps, param):
    Coming = apps.get_model("small", "Coming")
    coming = Coming()
    coming.datec = param[0]
    coming.numb = param[1]
    coming.organization = param[2]
    coming.save()
    return 

# Найти или Добавить Категорию
def get_category(apps, val):   
    # Поиск категории
    if val in dict_category.values():
        for k, v in dict_category.items():
            if v == val:
                return k    
    else:
        Category = apps.get_model("small", "Category")
        category = Category()
        category.title = val
        category.save()
        dict_category[category.id] = category.title
        return category.id

# Добавить товар
def insert_catalog(apps, param_catalog):   
    # Добавить товар
    Catalog = apps.get_model("small", "Catalog")
    catalog = Catalog()
    catalog.coming_id = param_catalog[0]
    catalog.category_id = param_catalog[1]
    catalog.title = param_catalog[2]
    catalog.details = param_catalog[3]
    catalog.price = param_catalog[4]
    catalog.quantity = param_catalog[5]
    catalog.unit = param_catalog[6]
    catalog.save()
    dict_catalog_price[catalog.id] = catalog.price    
    return

# Добавить Расходные накладные 
def insert_outgo(apps, param):
    Outgo = apps.get_model("small", "Outgo")
    outgo = Outgo()
    outgo.dateo = param[0]
    outgo.numb = param[1]
    outgo.consumer = param[2]
    outgo.save()
    return 

# Добавить Продажи
def insert_sale(apps, param):
    Sale = apps.get_model("small", "Sale")
    sale = Sale()
    sale.outgo_id = param[0]
    sale.catalog_id = param[1]
    sale.quantity = param[2]
    sale.save()
    return 

# Добавить Сообщения
def insert_message(apps, param):
    Message = apps.get_model("small", "Message")
    message = Message()
    message.datem = param[0]
    message.sender_id = param[1]
    message.recipient_id = param[2]
    message.details = param[3]
    message.save()
    message.datem = param[0]
    message.save()
    return 

# Добавить Уведомления
def insert_notification(apps, param):
    Notification = apps.get_model("small", "Notification")
    notification = Notification()
    notification.start = param[0]
    notification.finish = param[1]
    notification.title = param[2]
    notification.details = param[3]
    notification.save()
    return 

# Добавить Новости
def insert_news(apps, param):
    News = apps.get_model("small", "News")
    news = News()
    news.daten = param[0]
    news.title = param[1]
    news.details = param[2]
    news.photo = param[3]
    news.save()
    return 

# Начальные данные
def new_data(apps, schema_editor):
    try:
        # Суперпользователь id=1
        user = User.objects.create_superuser(username='root',
        email='business120823@mail.ru',
        first_name='Владислав', 
        last_name='Пилипенко',
        password='SsNn5678+-@')
        print("Суперпользователь создан")
    
        # Группа менеджеров
        managers = Group.objects.get_or_create(name = 'Managers')
        managers = Group.objects.get(name='Managers')
        print("Группа менеджеров создана")
    
        # Пользователь с ролью менеджера id=2
        user = User.objects.create_user(username='manager', password='Ss0066+-', email='manager@mail.ru', first_name='Игорь', last_name='Костылев')
        managers.user_set.add(user)
        print("Менеджер добавлен в группу менеджеров")

        # Простые пользователи () id3-22
        user = User.objects.create_user(username='user1', password='Uu0066+-', email='user1@mail.ru', first_name='Милана', last_name='Нартоликова')
        user = User.objects.create_user(username='user2', password='Uu0066+-', email='user2@mail.ru', first_name='Галина', last_name='Крапивенко')
        user = User.objects.create_user(username='user3', password='Uu0066+-', email='user3@mail.ru', first_name='Ольга', last_name='Жильцова')
        user = User.objects.create_user(username='user4', password='Uu0066+-', email='user4@mail.ru', first_name='Виктория', last_name='Светличная')
        user = User.objects.create_user(username='user5', password='Uu0066+-', email='user5@mail.ru', first_name='Юлия', last_name='Николаенко')
        user = User.objects.create_user(username='user6', password='Uu0066+-', email='user6@mail.ru', first_name='Марина', last_name='Стаценко')
        user = User.objects.create_user(username='user7', password='Uu0066+-', email='user7@mail.ru', first_name='Алина', last_name='Ким')
        user = User.objects.create_user(username='user8', password='Uu0066+-', email='user8@mail.ru', first_name='Виктория', last_name='Круглова')
        user = User.objects.create_user(username='user9', password='Uu0066+-', email='user9@mail.ru', first_name='Ольга', last_name='Муравьева')
        user = User.objects.create_user(username='user10', password='Uu0066+-', email='user10@mail.ru', first_name='Владислав', last_name='Саган')
        user = User.objects.create_user(username='user11', password='Uu0066+-', email='user11@mail.ru', first_name='Милана', last_name='Нартоликова')
        user = User.objects.create_user(username='user12', password='Uu0066+-', email='user12@mail.ru', first_name='Александр', last_name='Макогонов')
        user = User.objects.create_user(username='user13', password='Uu0066+-', email='user13@mail.ru', first_name='Никита', last_name='Олейничук')
        user = User.objects.create_user(username='user14', password='Uu0066+-', email='user14@mail.ru', first_name='Павел', last_name='Пономарёв')
        user = User.objects.create_user(username='user15', password='Uu0066+-', email='user15@mail.ru', first_name='Павел', last_name='Гаврилин')
        user = User.objects.create_user(username='user16', password='Uu0066+-', email='user16@mail.ru', first_name='Артём', last_name='Чикулаев')
        user = User.objects.create_user(username='user17', password='Uu0066+-', email='user17@mail.ru', first_name='Евгений', last_name='Ребик')
        user = User.objects.create_user(username='user18', password='Uu0066+-', email='user18@mail.ru', first_name='Виктория', last_name='Круглова')
        user = User.objects.create_user(username='user19', password='Uu0066+-', email='user19@mail.ru', first_name='Иван', last_name='Геберт')
        user = User.objects.create_user(username='user20', password='Uu0066+-', email='user20@mail.ru', first_name='Артём', last_name='Синицын')
        print("Созданы простые пользователи")

        # Клиенты
        parameters = ["Студия Аэрографии", get_adres(False), get_telefon(), "client1@mail.ru", "Аншаков Артем Владимирович"]
        insert_client(apps, parameters)
        parameters = ["PR Star", get_adres(False), get_telefon(), "client2@mail.ru", "Котенёв Илья Вячеславович"]
        insert_client(apps, parameters)
        parameters = ["ТОО LIFE PR", get_adres(False), get_telefon(), "client3@mail.ru", "Кучин Захар Евгеньевич"]
        insert_client(apps, parameters)
        parameters = ["Рекламная Компания Ultra Media", get_adres(False), get_telefon(), "client4@mail.ru", "Дорошенко Наталья Николаевна"]
        insert_client(apps, parameters)
        parameters = ["Полиграф Клуб", get_adres(False), get_telefon(), "client5@mail.ru", "Шалыгина Ксения Владимировна"]
        insert_client(apps, parameters)
        parameters = ["ООО Драйвер Роста", get_adres(False), get_telefon(), "client6@mail.ru", "Коренная Марина Васильевна"]
        insert_client(apps, parameters)
        parameters = ["Рекламно-производственная компания ZetBox", get_adres(False), get_telefon(), "client7@mail.ru", "Скрипченко Кристина Андреевна"]
        insert_client(apps, parameters)
        parameters = ["Веб-студия \"Великолепный Маркетинг\"", get_adres(False), get_telefon(), "client8@mail.ru", "Макушенко Вячеслав Павлович"]
        insert_client(apps, parameters)
        parameters = ["Мастерская Art-status", get_adres(False), get_telefon(), "client9@mail.ru", "Чупрова Алена Вадимовна"]
        insert_client(apps, parameters)
        parameters = ["Типография Кириллица", get_adres(False), get_telefon(), "client10@mail.ru", "Соколов Руслан Александрович"]
        insert_client(apps, parameters)
        parameters = ["Рекламное агентство \"Гранд\"", get_adres(False), get_telefon(), "client11@mail.ru", "Аксенов Анатолий Григорьевич"]
        insert_client(apps, parameters)
        parameters = ["Рекламное агентство FRS AG", get_adres(False), get_telefon(), "client12@mail.ru", "Тыщенко Яна Андреевна"]
        insert_client(apps, parameters)
        parameters = ["WebLeague.PRO", get_adres(False), get_telefon(), "client13@mail.ru", "Ермакова Юлия Юрьевна"]
        insert_client(apps, parameters)
        parameters = ["ТОО Сфера", get_adres(False), get_telefon(), "client14@mail.ru", "Белянская Светлана Сергеевна"]
        insert_client(apps, parameters)
        parameters = ["Типография Фантазия", get_adres(False), get_telefon(), "client15@mail.ru", "Смагина Анна Николаевна"]
        insert_client(apps, parameters)
        parameters = ["Студия копирайтинга Noircisss", get_adres(False), get_telefon(), "client16@mail.ru", "Беккер Татьяна Валерьевна"]
        insert_client(apps, parameters)
        parameters = ["AZ-Media — рекламное агентство", get_adres(False), get_telefon(), "client17@mail.ru", "Уколов Данил Андреевич"]
        insert_client(apps, parameters)
        parameters = ["Студия печати PrintScreen", get_adres(False), get_telefon(), "client18@mail.ru", "Соловьенко Николай Валентинович"]
        insert_client(apps, parameters)
        parameters = ["Holla Media", get_adres(False), get_telefon(), "client19@mail.ru", "Бобров Владимир Васильевич"]
        insert_client(apps, parameters)
        parameters = ["Типография Madon", get_adres(False), get_telefon(), "client20@mail.ru", "Великий Александр Викторович"]
        insert_client(apps, parameters)
        print("Созданы клиенты")

        # Заказы клиентов
        #parameters = ["Категория заявки"]
        #get_kind(apps, parameters[0])
        parameters = [datetime.now() - timedelta(days=120), 1,get_kind(apps, "Полиграфические / Типографические услуги"), "Грамоты металлографика на деревянной подложке", "Грамоты металлографика на деревянной подложке - 10 шт.", 3000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=115), 2,get_kind(apps, "Бланочная продукция"), "Фирменные бланки", "Фирменные бланки - 400 шт.", 8000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=110), 3,get_kind(apps, "Имиджево-сувенирные изделия"), "Блокноты", "Блокноты - 20 шт.", 4000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=100), 4,get_kind(apps, "Имиджево-сувенирные изделия "), "Календарь Настенный", "Календарь Настенный - 50 шт.", 25000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=95), 5,get_kind(apps, "Имиджево-сувенирные изделия "), "Ежедневники", "Ежедневники - 30 шт.", 15000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=245), 6,get_kind(apps, "Имиджево-сувенирные изделия "), "Магниты", "Магниты - 50 шт.", 5000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=235), 7,get_kind(apps, "Имиджево-сувенирные изделия "), "Флажки кабинетные", "Флажки кабинетные - 10 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=225), 8,get_kind(apps, "Рекламно-раздаточный материал"), "Z-карты", "Z-карты - 100 шт.", 7000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=215), 9,get_kind(apps, "Рекламно-раздаточный материал"), "Буклеты", "Буклеты - 200 шт.", 2000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=205), 10,get_kind(apps, "Рекламно-раздаточный материал"), "Визитки", "Визитки - 100 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=195), 11,get_kind(apps, "Рекламно-раздаточный материал"), "Флаеры", "Флаеры - 500 шт.", 5000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=185), 12,get_kind(apps, "Рекламно-раздаточный материал"), "Бумажные пакеты ", "Бумажные пакеты - 100 шт.", 5000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=175), 13,get_kind(apps, "Книжно-журнальные издания"), "Брошюра", "Брошюра - 50 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=165), 14,get_kind(apps, "Книжно-журнальные издания"), "Папка", "Папка - 20 шт.", 12000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=155), 15,get_kind(apps, "Книжно-журнальные издания"), "Пригласительные в конвертах", "Пригласительные в конвертах - 100 шт.", 11000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=145), 16,get_kind(apps, "Книжно-журнальные издания"), "Каталог продукции", "Каталог продукции - 30 шт.", 14000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=135), 17,get_kind(apps, "Книжно-журнальные издания"), "Папка Личное дело", "Папка Личное дело - 20 шт.", 13000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=125), 18,get_kind(apps, "Фасадно-интерьерная конструкция"), "Баннер", "Баннеры - 5 шт.", 50000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=115), 19,get_kind(apps, "Фасадно-интерьерная конструкция"), "Баннер", "Баннеры - 3 шт.", 30000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=105), 20,get_kind(apps, "Фасадно-интерьерная конструкция"), "Объёмные буквы", "Объёмные буквы", 25000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=95), 4,get_kind(apps, "Бланочная продукция"), "Фирменные бланки", "Фирменные бланки - 400 шт.", 8000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=85), 6,get_kind(apps, "Бланочная продукция"), "Фирменные бланки", "Фирменные бланки - 400 шт.", 8000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=75), 8,get_kind(apps, "Бланочная продукция"), "Фирменные бланки", "Фирменные бланки - 400 шт.", 8000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=65), 10,get_kind(apps, "Рекламно-раздаточный материал"), "Z-карты", "Z-карты - 100 шт.", 7000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=55), 11,get_kind(apps, "Рекламно-раздаточный материал"), "Буклеты", "Буклеты - 200 шт.", 2000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=45), 12,get_kind(apps, "Рекламно-раздаточный материал"), "Визитки", "Визитки - 100 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=35), 13,get_kind(apps, "Рекламно-раздаточный материал"), "Визитки", "Визитки - 100 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=25), 14,get_kind(apps, "Рекламно-раздаточный материал"), "Визитки", "Визитки - 100 шт.", 10000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=15), 19,get_kind(apps, "Фасадно-интерьерная конструкция"), "Баннер", "Баннеры - 5 шт.", 50000]
        insert_application(apps, parameters)
        parameters = [datetime.now() - timedelta(days=5), 20,get_kind(apps, "Фасадно-интерьерная конструкция"), "Баннер", "Баннеры - 5 шт.", 50000]
        insert_application(apps, parameters)        
        print("Созданы заказов клиентов")

        # Приходные накладные
        parameters = [datetime.now() - timedelta(days=120), 1, "«Высокие технологии печати»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=110), 2, "«Смарт-Т», ООО"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=100), 3, "«ОктоПринт Сервис», ООО"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=90), 4, "«ГК РуссКом»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=80), 5, "«ЯМ Интернешнл»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=70), 6, "«Алларт Сервис»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=60), 7, "«Типография Мы рядом», ООО"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=50), 8, "«Принтер-Плоттер.ру»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=40), 9, "«Konica Minolta»"]
        insert_coming(apps, parameters)      
        parameters = [datetime.now() - timedelta(days=30), 10, "«Армекс»"]
        insert_coming(apps, parameters)      
        print("Созданы Приходные накладные")

        #1 Каталог parameters - товар, (накладная, категория, подкатегория, название, описание, цена, количество, фото)
        parameters = [1, get_category(apps, "Дизайнерская бумага"), "PAPERLINE №120 OCEAN А3 80гр/500л", """Чистоцеллюлозная тонированная в массе цветная офисная бумага, изготовленная в соответствии с высочайшими стандартами качества. Цветовая гамма насчитывает 30 оттенков, в том числе пять оригинальных флуоресцентных цвета""", 1200, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [1, get_category(apps, "Дизайнерская бумага"), "Дизайнерская бумага TINTORETTO GESSO 72*101/ 140гр/см2", """Для офсетной печати рекомендуются краски, закрепляющиеся как путем впитывания, так и окислительной полимеризации. При высокой плотности запечатки следует минимизировать подачу краски, чтобы ускорить сушку и избежать отмарывания. Традиционная лакировка изображения зачастую неэффективна, поскольку немелованная поверхность впитывает лак. Однако хороших результатов можно добиться используя шелкографский UV-лак.""", 50, 1000, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [2, get_category(apps, "Рулонная бумага"), "Винил для сольвентной печати глянцевый 140 гр. (1,52м х 50м) A класс", """Виниловая пленка для широкоформатной печати""", 10000, 10, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [2, get_category(apps, "Калька"), "Калька GSK", """Чистоцеллюлозная бумага высокой прозрачности — «калька». Поставляется в двух оттенках белого: Extra White и Premium White. Процесс отбеливания производится бесхлорным способом. Бумага полностью поддается биологическому распаду и переработке.""", 2400, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [3, get_category(apps, "Кармашки для ламинирования"), "Кармашки для ламинирования А4 216*303*125 мкр", """Кармашки для ламинирования А4 216*303*125 мкр, глянцевая GMP Корея""", 1100, 50, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [3, get_category(apps, "Для пластиковых карт"), "Принтер карт для двусторонней печати Evolis Primacy 2 PM2-0025-M", """Тип устройвства
Принтер пластиковых карт
Модель — Primacy2
Бренд — Evolis
Общие характеристики
Технология прямой сублимационной цветной печати и смолисто-черная термопечать, Печать перезаписываемых карт
Стандартное разрешение
Разрешение печати: — Цветная и монохромная печать: 300×300 точек на дюйм & 300×600 точек на дюйм — Только монохромная печать: 300×1200 точек на дюйм ∙ Оптимизация печати с помощью колориметрического профиля""", 300000, 2, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [4, get_category(apps, "Клей"), "Термоклей Topmelt 5310", """Термоклей Topmelt 5310 1 кг""", 1100, 50, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [4, get_category(apps, "Клей"), "Воднодисперсионный клей Planatol ES 9723 30кг", """Воднодисперсионный клей Planatol ES 9723 30кг""", 21000, 40, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [5, get_category(apps, "Скотч"), "Скотч упаковочный 50 мм*200м", """Скотч упаковочный 50 мм*200м""", 130, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [5, get_category(apps, "Скотч"), "Скотч 12 мм*25м двухсторонний ", """Скотч 12 мм*25м двухсторонний Турция""", 50, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [6, get_category(apps, "Бейджи, ленты и аксессуары"), " Бейдж Kejea 100*155мм", """Бейдж Kejea 100*155мм""", 5, 50, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [6, get_category(apps, "Бейджи, ленты и аксессуары"), "Шнурки с карабином синие, белые, красные, зеленые, черные, желтые, ширина 1,5см", """Шнурки с карабином синие, белые, красные, зеленые, черные, желтые, ширина 1,5см""", 30, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [7, get_category(apps, "Переплетные материалы"), "Переплётный материал Красный шёлк 100см", """Переплётный материал Красный шёлк 100см""", 500, 50, "м"]
        insert_catalog(apps, parameters)    
        parameters = [7, get_category(apps, "Переплетные материалы"), "Переплетная проволока 9.5 мм (бобина) 3/8 белая 42000 петель", """Переплетная проволока 9.5 мм (бобина) 3/8 белая 42000 петель""", 5000, 20, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [8, get_category(apps, "Фольга"), "LUXOR SPEZIAL AB 220 122", """LUXOR SPEZIAL AB 220 122 м Фольга для полиграфии (Ш: 610)""", 10000, 20, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [8, get_category(apps, "Фольга"), "Фольга PC-G04 210*122м золото глянцевая", """Фольга PC-G04 210*122м золото глянцевая
Фольга для горячего тиснения на бумвинил / фольгирования, тип PC-G04 (Золото)
Производство — Южная Корея""", 900, 100, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [9, get_category(apps, "Пленка для припресса"), "Пленка д/гор.ламин. 27мик. 320мм матов.", """Пленка д/гор.ламин. 27мик. 320мм матов. (200м) Индия""", 1100, 50, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [9, get_category(apps, "Пленка для припресса"), "Рулонная пленка GMP для горячего ламинирования глянцевая", """Пленки для ламинирования GMP считаются лучшими в мире. Уникальное оборудование для производства пленки имеет полностью автоматизированный контроль процесса. Технология многослойного нанесения клеевого состава  обеспечивает прочность пленки на протяжении всего срока службы полиграфического изделия и не позволяет пленке расслаиваться со временем. Специально разработанный состав и толщина клеевого слоя дают возможность работать практически со всеми видами бумаги и типами печати, обеспечивая прочное и качественное ламинирование.""", 1200, 100, "м"]
        insert_catalog(apps, parameters)    
        parameters = [10, get_category(apps, "Запасные части"), "Контейнер для отработанного тонера Xerox 008R12990", """Контейнер для отработанного тонера Xerox 008R12990
Контейнер используется для хранения отработанного тонера в принтере. Отработанный тонер представляет собой те частицы красящего вещества, которые по различным причинам не попали на поверхность листа бумаги, а также пыль, поступающую в процесс печати вместе с бумагой и воздухом. Надежно защищает аппарат от нежелательного попадания изношенного тонера в электронные и механические узлы устройства. После заполнения контейнер необходимо заменить""", 2500, 25, "шт."]
        insert_catalog(apps, parameters)    
        parameters = [10, get_category(apps, "Запасные части"), "Комплект роликов подачи 5-го (обходного) лотка Xerox 604K23660", """Комплект роликов подачи 5-го (обходного) лотка Xerox 604K23660
Комплект роликов подачи бумаги, выполняют функцию захвата бумаги из пятого лотка. В комплекте 3 ролика""", 4700, 25, "шт."]
        insert_catalog(apps, parameters)   
        print("Создан Каталог")

        # Расходные накладные
        parameters = [datetime.now() - timedelta(days=100), 1, "Winpix & Art-Foto"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=90), 2, "Hi photo"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=80), 3, "FlyPrint group"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=70), 4, "МДМпринт"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=60), 5, "Литография принт"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=50), 6, "Быстрый Цвет"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=40), 7, "Копицентр"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=30), 8, "Копирка"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=20), 9, "Kraftico"]
        insert_outgo(apps, parameters)     
        parameters = [datetime.now() - timedelta(days=10), 10, "Печатный Элемент"]
        insert_outgo(apps, parameters)     
        print("Созданы Расходные накладные")

        # Продажи
        parameters = [1, 1, 20]
        insert_sale(apps, parameters)     
        parameters = [1, 2, 10]
        insert_sale(apps, parameters)     
        parameters = [2, 3, 2]
        insert_sale(apps, parameters)     
        parameters = [2, 4, 20]
        insert_sale(apps, parameters)     
        parameters = [3, 5, 10]
        insert_sale(apps, parameters)     
        parameters = [3, 6, 1]
        insert_sale(apps, parameters)     
        parameters = [4, 7, 10]
        insert_sale(apps, parameters)     
        parameters = [4, 8, 5]
        insert_sale(apps, parameters)     
        parameters = [5, 9, 15]
        insert_sale(apps, parameters)     
        parameters = [5, 10, 15]
        insert_sale(apps, parameters)     
        parameters = [6, 11, 10]
        insert_sale(apps, parameters)     
        parameters = [6, 12, 20]
        insert_sale(apps, parameters)     
        parameters = [7, 13, 10]
        insert_sale(apps, parameters)     
        parameters = [7, 14, 5]
        insert_sale(apps, parameters)     
        parameters = [8, 15, 5]
        insert_sale(apps, parameters)     
        parameters = [8, 16, 15]
        insert_sale(apps, parameters)     
        parameters = [9, 17, 10]
        insert_sale(apps, parameters)     
        parameters = [9, 18, 20]
        insert_sale(apps, parameters)     
        parameters = [10, 19, 5]
        insert_sale(apps, parameters)     
        parameters = [10, 20, 2]
        insert_sale(apps, parameters)     
        print("Созданы Продажи")

        # Сообщения (3-22)
        parameters = [datetime.now() - timedelta(minutes=60), 3, 4, "Привет, Галина"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=59), 4, 3, "Привет, Милана"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=58), 3, 4, "Как дела?"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=57), 4, 3, "Спасибо, все в порядке"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=56), 5, 6, "Добрый день, Виктория"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=55), 6, 5, "Привет, Ольга"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=54), 5, 6, "Есть новости по проекту?"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=53), 6, 5, "Пока тишина, ждем"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=52), 7, 8, "Привет, Марина"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=51), 8, 7, "Привет, Юлия"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=50), 7, 8, "Сегодня выезжаете по адресам?"]
        insert_message(apps, parameters)  
        parameters = [datetime.now() - timedelta(minutes=49), 8, 7, "Да, постраюсь"]
        insert_message(apps, parameters)  
        print("Созданы Сообщения")

        # Добавить Уведомления
        parameters = [datetime.now() + timedelta(days=7), datetime.now() + timedelta(days=7) + timedelta(minutes=60), "Собрание", "Добрый день, собрание коллектива"]
        insert_notification(apps, parameters)   
        parameters = [datetime.now() + timedelta(days=6) + timedelta(minutes=45), datetime.now() + timedelta(days=6) + timedelta(minutes=60), "Санитраный день", "Добрый день, санитраный день"]
        insert_notification(apps, parameters)   
        print("Созданы Уведомления") 
        
        # Добавить Новости
        parameters = [datetime.now() - timedelta(days=35), "Компания «Смарт-Т» установила Mimaki JV300-160 Plus в РК «Корсар принт»", """С широким распространением чернил MaraJet Di-FMS от ведущего немецкого производителя Marabu оригинальные расходники для принтеров Mimaki уже не кажутся неким эталоном качества. Недорогие и полностью совместимые с оригиналом, эти чернила обеспечивают идеальные яркие отпечатки с высокой плотностью пигмента и широким цветовым охватом, максимально устойчивые к выцветанию, трению и прочим воздействиям. Благодаря экологичному составу и отсутствию сильного запаха MaraJet Di-FMS абсолютно безопасны для окружающих. Что особенно важно, эти чернила стабильно поставляются в Россию и всегда готовы к отгрузке на центральном складе компании «Смарт-Т» в Москве и во всех ее региональных представительствах.
Именно на чернилах MaraJet Di-FMS в волгоградской рекламной компании «Корсар принт» инженером «Смарт-Т» был запущен высокопроизводительный экосольвентный принтер Mimaki JV300-160 Plus. Даже в скоростных режимах печати чернила в полной мере демонстрируют все свои преимущества, гарантируя стабильную работу печатающих головок, высокое качество печати с быстрым высыханием красок без отмарывания и склеивания носителя в рулоне. Новый принтер значительно сократит сроки выполнения заказов в компании и позволит изготавливать большой ассортимент качественной рекламной продукции для уличного и интерьерного размещения""", "images/news1.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=30), "\"ОктоПринт Сервис\" рекомендует восстановитель для ОРТП Blanket Rejuvenator", """Использование восстановителя Blanket Rejuvenator помогает за считанные минуты вернуть поврежденным участкам резинотканевого полотна свойства исходной гладкой поверхности. Средство равномерно наносится кистью на участок ОРТП с продавом. Восстановление резины происходит за 1 минуту или немного дольше (в зависимости от глубины продава). После этого излишек средства удаляется. Через несколько минут после вынужденной остановки резина снова готова к печати! Если глубина продава не была очень большой, то восстановленная резина используется для новых тиражей""", "images/news2.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=25), "Новинка: УФ-чернила SUPER NOVA UV-M для оборудования Mimaki", """ГК «РУССКОМ» представляет новые УФ-чернила SUPER NOVA UV-M, разработанные специальнодля оборудования Mimaki одним из крупнейших производителей чернил в мире!
УФ-чернила SUPER NOVA UV-M являются лучшим аналогом оригинальных чернил Mimaki поочень привлекательной цене.
Наши специалисты провели многочисленные и длительные тесты печати на разных материалах.Чернила SUPER NOVA UV-M показали высокие результаты во всех режимах: стабильность,высокая плотность, умеренный запах, насыщенность, яркость, качество печати, устойчивость кстиранию, эластичность.
SUPER NOVA UV-M формируют эластичный слой, допускающий деформацию наскручивание/перегиб без растрескивания и осыпания.
Поставляются в бутылке объемом 1л, с чипом в комплекте.
Цветовая схема: CMYK+W+CL, промывочная жидкость.
База профилей постоянно пополняется.""", "images/news3.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=20), "ЦПМ HanGlobal Labstar 330S в «Дельта-Центр»", """В типографии «Дельта-Центр», Омск, введена в эксплуатацию цифровая печатная машина HanGlobal Labstar 330S. Работы по запуску и обучению персонала проведены сервисными специалистами компании «НИССА Центрум». ЦПМ установлена в конфигурации WWCMYK то есть с двойными цифровыми белилами. Как и для всех ранее установленных в России ЦПМ Labstar 330S, в дальнейшем доступно дооснащение одним или двумя дополнительными красочными каналами для достижения расширенного цветового охвата (Оранжевый, Фиолетовый) и/или лаками для облагораживания - выборочного лакирования и нанесения горячей фольги по слою лака/клея.
Типография «Дельта-Центр» успешно работает на полиграфическом рынке с 2009 года. Специализируется на изготовлении рулонной самоклеящейся этикетки. Предприятие активно развивается, в январе 2023 г здесь была введена в эксплуатацию финишная линия Vision MDF 330
HanGlobal LabStar330 предназначена для печати на полимерных пленках, включая тонкие, от 0.02 мм безосновные, в том числе PE, PET, PVC, PP, BOPP, на алюминиевой фольге, бумаге, картоне и композитных материалах. Красочность от CMYK до 7 цветов и 8 красочных каналов - WWCMYK+2. Дополнительные каналы могут быть использованы как для расширения цветового охвата, Оранжевый, Фиолетовый, так и для цифрового облагораживания (лак, горячая фольга). Позволяет, с использованием дополнительной финишной обработки, производить различные виды этикетки и картонную коробку (максимальная толщина материала до 0.5 мм). Эта печатная машина обеспечивает стабильное цветовоспроизведение, высокую эффективность печати малых и средних тиражей, печать переменных данных, включая QR и DataMatrix коды. Машина LabStar 330 получила международную сертификацию G7 Master Idealliance. «НИССА Центрум» является эксклюзивным дистрибьютором решений компании HanGlobal в области цифровой печати этикетки.""", "images/news4.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=15), "Осень играет всеми цветами – Выбирайте свою ЦПМ!", """Дорога ложка к обеду! Эта пословица применима практически везде – в том числе и в цифровой полиграфии!
Сезон печати стартовал, и многие работают в ДВЕ, а то и ТРИ смены.
Как и в любом деле, важен инструмент. Компания "Высокие технологии печати" подготовилась к жаркой поре и готова предложить со склада оборудование для полноцветной печати на любой вкус и кошелек!
Итак, для Вас в наличии:
МФУ Xerox Versalink C7120
Лазерный принтер А3 Xerox Versalink 7000DN
Лазерный принтер А3 Xerox Versalink 8000DT
ЦПМ Xerox Color C60
ЦПМ Canon imagePRESS C165
ЦПМ Xerox Versant 180 Press""", "images/news5.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=10), "Что говорят клиенты о плёнке для ламинирования EASYLAM-R (Китай)", """В течение сентября мы провели масштабное тестирование новой плёнки для ламинирования EASYLAM-R (пр-во Китай) среди наших клиентов. Задача была провести испытания плёнки при ламинировании реальных тиражей клиентов. Каждому клиенту мы передали на тестирование рулон плёнки нужного вида.
Одним из участников тестирования стала типография П-Центр, которой была предоставлена плёнка 320мм х 3000м х 25 mic PP глянцевая (d 77 mm).
По словам коммерческого директора Бориса Титова, тестирование прошло успешно, никаких замечаний нет. Есть небольшое отличие — внутренняя втулка более гладкая, в сравнении от ранее используемых плёнок. На процесс ламинирования это не влияет.
Клиент доволен новинкой, плёнка понравилась, типография готова с ней работать и рекомендовать коллегам!""", "images/news6.jpeg" ]
        insert_news(apps, parameters)
        parameters = [datetime.now() - timedelta(days=5), "Изменения в линейках материалов для печати Xerox", """важаемые заказчики и партнеры компании "Высокие технологии печати"!
В связи с организационными изменениями компании "Ксерокс (СНГ)" произойдут изменения в продуктовых линейках материалов для печати:
В сегменте белых офисных бумаг: доступна к заказу полная линейка офисных бумаг Марафон (Марафон Премьер, Марафон Бизнес, Марафон Стандарт).
В сегменте широкоформатных материалов: к заказу из Португалии будет доступна линейка материалов под брендом Evolution, полностью дублирующая текущий ассортимент Xerox.
Локальная линейка Марафон Стандарт, Калька, Сублимационная бумага – доступны в стандартном режиме.
В сегменте форматных цифровых бумаг изменений не планируется: Colotech+, ColorPrint, RevolutionNeverTear.
Компания "Высокие технологии печати" постоянно поддерживаем на складе ассортимент бумаги для цифровой и широкоформатной печати, а также готовы привести под заказ.
Уточнить актуальные цены и наличие Вы можете у своего менеджера.""", "images/news7.jpeg" ]
        insert_news(apps, parameters)
        print("Добавлены новости")

    except Exception as error:
        print(error)

    

class Migration(migrations.Migration):

    dependencies = [
        ('small', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(new_data),
        migrations.RunSQL("""CREATE VIEW view_coming AS
        SELECT id, datec, numb, organization, (SELECT SUM((price*quantity)) FROM catalog WHERE catalog.coming_id=coming.id) AS total FROM coming"""),
        migrations.RunSQL("""CREATE VIEW view_catalog AS
        SELECT catalog.id, catalog.coming_id, catalog.category_id, category.title AS category, catalog.title,catalog.details, catalog.price, catalog.quantity, (catalog.price*catalog.quantity) AS total, catalog.unit, 
        (SELECT SUM(quantity) FROM sale WHERE sale.catalog_id = catalog.id) AS sale_quantity,
        CASE 
        WHEN (catalog.quantity - (SELECT SUM(quantity) FROM sale WHERE sale.catalog_id = catalog.id)) IS NULL 
        THEN catalog.quantity 
        ELSE (catalog.quantity - (SELECT SUM(quantity) FROM sale WHERE sale.catalog_id = catalog.id)) 
        END
        AS available
        FROM catalog LEFT JOIN category ON catalog.category_id = category.id
        WHERE catalog.quantity > 0
        ORDER BY catalog.title,  catalog.title"""),        
        migrations.RunSQL("""CREATE VIEW view_outgo AS
        SELECT o.id, o.dateo, o.numb, o.consumer, 
        (SELECT SUM(sale.quantity*catalog.price)
        FROM sale LEFT JOIN catalog ON sale.catalog_id=catalog.id
        LEFT JOIN outgo ON sale.outgo_id=outgo.id
        WHERE outgo_id=o.id)  AS total 
        FROM outgo o"""),
        migrations.RunSQL("""CREATE VIEW view_sale AS
        SELECT sale.id, sale.outgo_id, view_outgo.dateo, view_outgo.numb, view_outgo.consumer, sale.catalog_id, view_catalog.category, view_catalog.title, view_catalog.details,
        view_catalog.price, sale.quantity, view_catalog.unit, (sale.quantity*view_catalog.price) AS total
        FROM sale LEFT JOIN view_outgo ON sale.outgo_id=view_outgo.id
        LEFT JOIN view_catalog ON sale.catalog_id=view_catalog.id"""),                  
        migrations.RunSQL("""CREATE VIEW view_message AS
                        SELECT message.id, message.datem, message.sender_id, s.username AS sender_username, s.first_name AS sender_first_name, s.last_name AS sender_last_name,
                        message.recipient_id, r.username AS recipient_username, r.first_name AS recipient_first_name, r.last_name AS recipient_last_name, message.details                        
                        FROM message LEFT JOIN auth_user s ON message.sender_id=s.id LEFT JOIN auth_user r ON message.recipient_id=r.id"""),      
        ## Представление SQLite
        #migrations.RunSQL("""CREATE VIEW view_user_last_message AS
        #                SELECT auth_user.id, auth_user.is_superuser, auth_user.username, auth_user.first_name, auth_user.last_name,
        #                (SELECT m1.recipient_id FROM message m1 WHERE m1.sender_id=auth_user.id ORDER BY m1.datem DESC LIMIT 1) AS last_send_id,
        #                (SELECT strftime('%d.%m.%Y %H:%M:%S', m1.datem)|| ': ' || m1.details FROM message m1 WHERE m1.sender_id=auth_user.id ORDER BY m1.datem DESC LIMIT 1) AS last_send_message,
        #                (SELECT m2.sender_id FROM message m2 WHERE m2.recipient_id=auth_user.id ORDER BY m2.datem DESC LIMIT 1) AS last_recipient_id,
        #                (SELECT strftime('%d.%m.%Y %H:%M:%S', m2.datem)|| ': ' || m2.details FROM message m2 WHERE m2.recipient_id=auth_user.id ORDER BY m2.datem DESC LIMIT 1) AS last_recipient_message
        #                FROM auth_user """), 
        # Представление PostgreSQL
        migrations.RunSQL("""CREATE VIEW view_user_last_message AS
                        SELECT auth_user.id, auth_user.is_superuser, auth_user.username, auth_user.first_name, auth_user.last_name,
                        (SELECT m1.recipient_id FROM message m1 WHERE m1.sender_id=auth_user.id ORDER BY m1.datem DESC LIMIT 1) AS last_send_id,
                        (SELECT to_char(  m1.datem, 'DD.MM.YYYY HH:MM:SS')|| ': ' || m1.details FROM message m1 WHERE m1.sender_id=auth_user.id ORDER BY m1.datem DESC LIMIT 1) AS last_send_message,
                        (SELECT m2.sender_id FROM message m2 WHERE m2.recipient_id=auth_user.id ORDER BY m2.datem DESC LIMIT 1) AS last_recipient_id,
                        (SELECT to_char(  m2.datem, 'DD.MM.YYYY HH:MM:SS')|| ': ' || m2.details FROM message m2 WHERE m2.recipient_id=auth_user.id ORDER BY m2.datem DESC LIMIT 1) AS last_recipient_message
                        FROM auth_user"""), 
        ## Представление SQLite
        #migrations.RunSQL("""CREATE VIEW sale_year_mohtn_total AS
        #SELECT 1 as id, CAST(strftime('%Y', dateo) AS INTEGER) AS yr, CAST(strftime('%m', dateo) AS INTEGER) AS mon, SUM(total) As tot
        #FROM view_sale
        #GROUP BY CAST(strftime('%Y', dateo) AS INTEGER),CAST(strftime('%m', dateo) AS INTEGER)"""), 
        # Представление PostgreSQL
        migrations.RunSQL("""CREATE VIEW sale_year_mohtn_total AS
        SELECT 1 as id, EXTRACT(year FROM dateo) AS yr, EXTRACT(month FROM dateo) AS mon, SUM(total) As tot
        FROM view_sale
        GROUP BY EXTRACT(year FROM dateo), EXTRACT(month FROM dateo)"""), 
        ## Представление SQLite
        #migrations.RunSQL("""CREATE VIEW application_year_mohtn_price AS
        #SELECT 1 as id, CAST(strftime('%Y', datea) AS INTEGER) AS yr, CAST(strftime('%m', datea) AS INTEGER) AS mon, SUM(price) As tot
        #FROM application
        #GROUP BY CAST(strftime('%Y', datea) AS INTEGER), CAST(strftime('%m', datea) AS INTEGER)"""), 
        # Представление PostgreSQL
        migrations.RunSQL("""CREATE VIEW application_year_mohtn_price AS
        SELECT 1 as id, EXTRACT(year FROM datea) AS yr, EXTRACT(month FROM datea) AS mon, SUM(price) As tot
        FROM application
        GROUP BY EXTRACT(year FROM datea), EXTRACT(month FROM datea)"""), 

    ]

